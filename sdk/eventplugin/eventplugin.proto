// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package eventplugin.v1;

import "google/protobuf/struct.proto";
import "sdk/plugin/pb/backend.proto";

option go_package = "github.com/hashicorp/vault/sdk/eventplugin";

message SubscriptionEvent {
  // only a single subscription ID will be used in a stream, so the value MAY be omitted in subsequent messages,
  // but is REQUIRED for the first message. This is included for future-proofing having a plugin handle multiple
  // subscriptions per plugin instance.
  string subscription_id = 1;
  string event_json = 2;
}

message SubscribeRequest {
  // parameters to set up the request, e.g., queue name, API key
  google.protobuf.Struct config = 1;
  // globally unique subscription ID, generated by Vault
  string subscription_id = 2;
  // whether to verify the connection immediately.
  bool verify_connection = 3;
}

message UnsubscribeRequest {
  string subscription_id = 1;
}

message UnsubscribeResponse {}

message SubscribeResponse {
  pb.ProtoError err = 1;
  // If true, Vault can retry sending events with this subscription on error.
  // If false, the subscription is canceled on error.
  bool retry = 2;
}

message SendSubscriptionEventsResponse {}

message PluginVersionRequest {}

message PluginVersionResponse {
  // plugin name, e.g., "sqs"
  string plugin_name = 1;
  // plugin version, e.g., "v1.0.0"
  string plugin_version = 2;
}

message CloseRequest {}
message CloseResponse {}

// plugins should implement the server
service EventSubscribePluginService {
  // Start a new subscription.
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse);
  // Used by Vault to send events to a subscription. Only one stream is allowed per subscription.
  // Ending this stream will stop the events, but won't necessarily mean tha the subscription information
  // (e.g., config data like API keys) should be deleted.
  rpc SendSubscriptionEvents(stream SubscriptionEvent) returns (SendSubscriptionEventsResponse);
  // Cause the subscription to be deleted and any related information about it cleaned up.
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);
  rpc PluginVersion(PluginVersionRequest) returns (PluginVersionResponse);
  rpc Close(CloseRequest) returns (CloseResponse);
}
