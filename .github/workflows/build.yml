name: build

on:
  workflow_dispatch:
  pull_request:
    # The default types for pull_request are [ opened, synchronize, reopened ].
    # This is insufficient for our needs, since we're skipping stuff on PRs in
    # draft mode.  By adding the ready_for_review type, when a draft pr is marked
    # ready, we run everything, including the stuff we'd have skipped up until now.
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - main
      - release/**
  schedule:
     # * is a special character in YAML so you have to quote this string
    - cron:  '05 02 * * *'

concurrency:
  group: ${{ github.head_ref || github.run_id }}-build
  cancel-in-progress: true

jobs:
  setup:
    # Trigger the setup workflow if any of the following conditions are true:
    #   * We've been triggered by a push (merge).
    #   * We're a pull request and we're out of draft mode.
    #   * The workflow trigger is our scheduled full build.
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    runs-on: ${{ github.repository == 'hashicorp/vault' && 'ubuntu-latest' || fromJSON('["self-hosted","linux","small"]') }}
    outputs:
      app-changed: ${{ steps.changed-files.outputs.app-changed }}
      build-date: ${{ steps.metadata.outputs.vault-build-date }}
      checkout-ref: ${{ steps.checkout.outputs.ref }}
      compute-build: ${{ steps.metadata.outputs.compute-build }}
      compute-build-compat: ${{ steps.metadata.outputs.compute-build-compat }}
      compute-build-ui: ${{ steps.metadata.outputs.compute-build-ui }}
      compute-small: ${{ steps.metadata.outputs.compute-small }}
      docs-changed: ${{ steps.changed-files.outputs.docs-changed }}
      is-draft: ${{ steps.metadata.outputs.is-draft }}
      is-enterprise: ${{ steps.metadata.outputs.is-enterprise }}
      is-fork: ${{ steps.metadata.outputs.is-fork }}
      labels: ${{ steps.metadata.outputs.labels }}
      ui-changed: ${{ steps.changed-files.outputs.ui-changed }}
      vault-binary-name: ${{ steps.metadata.outputs.vault-binary-name }}
      vault-revision: ${{ steps.metadata.outputs.vault-revision }}
      vault-version: ${{ steps.metadata.outputs.vault-version }}
      vault-version-package: ${{ steps.metadata.outputs.vault-version-package }}
      vault-version-test: ${{ steps.metadata.outputs.vault-version-test }}
      workflow-trigger: ${{ steps.metadata.outputs.workflow-trigger }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: ./.github/actions/changed-files
        id: changed-files
      - uses: ./.github/actions/checkout
        id: checkout # make sure we check out correct ref after checking changed files
      - uses: hashicorp/actions-set-product-version@v1
        id: set-product-version
      - uses: ./.github/actions/metadata
        id: metadata
        with:
          vault-version: ${{ steps.set-product-version.outputs.product-version }}
      - uses: ./.github/actions/set-up-go
        name: Ensure Go modules are cached
        with:
          github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
          # don't download them on a cache hit during setup, just make sure they're cached before
          # subsequent workflows are run.
          no-restore: true

  ui:
    # Run the UI build if any of the following conditions are true:
    # * We're of draft mode on a pull request and the UI or Go app has changed
    # * The `build/all` tag is present on either a pull request or on the pull request that created
    #   a merge
    # * The workflow trigger is a schedule. This is how we ensure that we build all extended
    #   artifact types to ensure compilability.
    #
    # A note that we always trigger this for app changes to ensure there's a web UI asset in the
    # cache. If it's not we'll build the UI and cache it.
    if: |
      (needs.setup.outputs.is-draft == 'false' &&
        (needs.setup.outputs.ui-changed == 'true' || needs.setup.outputs.app-changed == 'true')
      ) ||
      contains(fromJSON(needs.setup.outputs.labels), 'build/all') ||
      needs.setup.outputs.workflow-trigger == 'schedule'
    needs: setup
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-build-ui) }}
    outputs:
      cache-key: ui-${{ steps.ui-hash.outputs.ui-hash }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ needs.setup.outputs.checkout-ref }}
      - name: Get UI hash
        id: ui-hash
        run: echo "ui-hash=$(git ls-tree HEAD ui --object-only)" | tee -a "$GITHUB_OUTPUT"
      - name: Set up UI asset cache
        id: cache-ui-assets
        uses: actions/cache@e12d46a63a90f2fae62d114769bbf2a179198b5c # v3.3.3
        with:
          enableCrossOsArchive: true
          lookup-only: true
          path: http/web_ui
          # Only restore the UI asset cache if we haven't modified anything in the ui directory.
          # Never do a partial restore of the web_ui if we don't get a cache hit.
          key: ui-${{ steps.ui-hash.outputs.ui-hash }}
      - if: steps.cache-ui-assets.outputs.cache-hit != 'true'
        name: Set up node and yarn
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
        with:
          node-version-file: ui/package.json
          cache: yarn
          cache-dependency-path: ui/yarn.lock
      - if: steps.cache-ui-assets.outputs.cache-hit != 'true'
        name: Build UI
        run: make ci-build-ui

  artifacts:
    # Build the vault artifacts if any of the following conditions are true:
    #   * The workflow trigger is our scheduled full build.
    #   * The `build/all` label is present on either a pull request or on a merge where its
    #     corresponding pull request has such a label present.
    #   * We're of draft mode on a pull request and the UI or Go app has changed
    if: |
      needs.setup.outputs.workflow-trigger == 'schedule' ||
      contains(fromJSON(needs.setup.outputs.labels), 'build/all') ||
      (needs.setup.outputs.is-draft == 'false' &&
        (needs.setup.outputs.ui-changed == 'true' || needs.setup.outputs.app-changed == 'true')
      )
    needs:
      - setup
      - ui
    # Make sure we use the correct workflow depending on our repository.
    uses: ./.github/workflows/build-artifacts-ce.yml
    with:
      build-all: ${{ contains(fromJSON(needs.setup.outputs.labels), 'build/all') || needs.setup.outputs.workflow-trigger == 'scheduled' }}
      build-date: ${{ needs.setup.outputs.build-date }}
      checkout-ref: ${{ needs.setup.outputs.checkout-ref }}
      compute-build: ${{ needs.setup.outputs.compute-build }}
      compute-build-compat: ${{ needs.setup.outputs.compute-build-compat }}
      compute-small: ${{ needs.setup.outputs.compute-small }}
      vault-revision: ${{ needs.setup.outputs.vault-revision }}
      vault-version: ${{ needs.setup.outputs.vault-version }}
      vault-version-package: ${{ needs.setup.outputs.vault-version-package }}
      web-ui-cache-key: ${{ needs.ui.outputs.cache-key }}
    secrets: inherit

  test:
    # Test all of the testable artifacts if our repo isn't a fork. We don't test when the PR is
    # created from a fork because secrets are not passed in and they are required.
    if: ${{ needs.setup.outputs.is-fork == 'false' }}
    name: test ${{ matrix.artifact }}
    needs:
      - setup
      - ui
      - artifacts
    uses: ./.github/workflows/test-run-enos-scenario-matrix.yml
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.artifacts.outputs.testable-packages) }}
    with:
      build-artifact-name: ${{ matrix.artifact }}
      sample-max: 1
      sample-name: ${{ matrix.sample }}
      ssh-key-name: ${{ github.event.repository.name }}-ci-ssh-key
      vault-edition: ${{ matrix.edition }}
      vault-revision: ${{ needs.setup.outputs.vault-revision }}
      vault-version: ${{ needs.setup.outputs.vault-version-test }}
    secrets: inherit

  test-containers:
    # Test all of the testable containers if our repo isn't a fork. We don't test when the PR is
    # created from a fork because secrets are not passed in and they are required (for now).
    if: ${{ needs.setup.outputs.is-fork == 'false' }}
    name: test ${{ matrix.artifact }}
    needs:
      - setup
      - ui
      - artifacts
    uses: ./.github/workflows/enos-run-k8s.yml
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.artifacts.outputs.testable-containers) }}
    with:
      artifact-build-date: ${{ needs.setup.outputs.build-date }}
      artifact-name: ${{ matrix.artifact }}
      artifact-revision: ${{ needs.setup.outputs.vault-revision }}
      artifact-version: ${{ needs.setup.outputs.vault-version-test }}
    secrets: inherit

  completed-successfully:
    # Always trigger our build/completed-successfully workflow as it is required to merge. This
    # workflow is responsible for determing our success or fail result, updating the PR with
    # a comment, notifying slack if it fails, and creating our required CRT build metadata.
    if: always() && github.head_ref != ''
    runs-on: ${{ github.repository == 'hashicorp/vault' && 'ubuntu-latest' || fromJSON('["self-hosted","linux","small"]') }}
    permissions:
      id-token: write
      contents: read
    needs:
      - setup
      - ui
      - artifacts
      - test
      - test-containers
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - id: status
        name: Determine status
        run: |
          results=$(tr -d '\n' <<< '${{ toJSON(needs.*.result) }}')
          if ! grep -q -v -E '(failure|cancelled)' <<< "$results"; then
            result="failed"
          else
            result="success"
          fi
          {
            echo "result=${result}"
            echo "results=${results}"
          } | tee -a "$GITHUB_OUTPUT"
      - if: needs.setup.outputs.is-enterprise
        id: vault-auth
        name: Vault Authenticate
        run: vault-auth
      - if: needs.setup.outputs.is-enterprise
        id: secrets
        name: Fetch Vault Secrets
        uses: hashicorp/vault-action@affa6f04da5c2d55e6e115b7d1b044a6b1af8c74
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets: |
            kv/data/github/${{ github.repository }}/github_actions_notifications_bot token | SLACK_BOT_TOKEN;
      - id: slackbot-token
        run:
          echo "slackbot-token=${{ needs.setup.outputs.is-enterprise != 'true' && secrets.SLACK_BOT_TOKEN || steps.secrets.outputs.SLACK_BOT_TOKEN }}" >> "$GITHUB_OUTPUT"
      - name: Add a PR comment with the build status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.event.repository.name }}
          BUILD_UI: ${{ needs.ui.result }}
          BUILD_ARTIFACTS: ${{ needs.artifacts.result }}
          TEST: ${{ needs.test.result }}
          TEST_CONTAINERS: ${{ needs.test-containers.result }}
        run: ./.github/scripts/report-build-status.sh
      - name: Notify build failures in Slack
        if: |
          always() &&
          steps.status.outputs.result != 'success' &&
          (github.ref_name == 'main' || startsWith(github.ref_name, 'release/'))
        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117 # v1.24.0
        # We intentionally aren't using the following here since it's from an internal repo
        # uses: hashicorp/cloud-gha-slack-notifier@730a033037b8e603adf99ebd3085f0fdfe75e2f4 #v1
        env:
          SLACK_BOT_TOKEN: ${{ steps.slackbot-token.outputs.slackbot-token }}
        with:
          channel-id: "C05AABYEA9Y" # sent to #feed-vault-ci-official, use "C05Q4D5V89W"/test-vault-ci-slack-integration for testing
          payload: |
            {
              "text": "${{ github.repository }} build failures on ${{ github.ref_name }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":rotating_light: ${{ github.repository }} build failures on ${{ github.ref_name }} :rotating_light:",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.status.outputs.result == 'success' && ':white_check_mark:' || ':x:' }} Build results\n${{ steps.status.outputs.sresult == 'success' && ':white_check_mark:' || ':x:' }} Enos scenarios"
                  },
                    "text": "':x:'"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Failing Workflow",
                      "emoji": true
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
      - uses: hashicorp/actions-generate-metadata@v1
        id: generate-metadata-file
        with:
          version: ${{ needs.setup.outputs.vault-version }}
          product: ${{ needs.setup.outputs.vault-binary-name }}
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      # pin to v3.x until HREL-99 is resolved.
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}
          if-no-files-found: error
      - if: always() && steps.status.outputs.result != 'success'
        run: |
          echo "One or more required build workflows failed: ${{ steps.status.outputs.results }}"
          exit 1
