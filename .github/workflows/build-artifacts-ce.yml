name: ce

on:
  workflow_dispatch:
    inputs:
      build-all:
        type: boolean
        default: false
      build-date:
        type: string
        required: true
      checkout-ref:
        type: string
        default: ""
      compute-build:
        type: string # JSON encoded to support passing arrays
        description: A JSON encoded "runs-on" for build worfkflows
        required: true
      compute-build-compat:
        type: string # JSON encoded to support passing arrays
        description: A JSON encoded "runs-on" for build workflows that need older glibc
        required: true
      compute-small:
        type: string # JSON encoded to support passing arrays
        description: A JSON encoded "runs-on" for non-resource-intensive workflows
        required: true
      vault-revision:
        type: string
        required: true
      vault-version:
        type: string
        required: true
      vault-version-package:
        type: string
        required: true
      web-ui-cache-key:
        type: string
        required: true
  workflow_call:
    inputs:
      build-all:
        type: boolean
        default: false
      build-date:
        type: string
        required: true
      checkout-ref:
        type: string
        default: ""
      compute-build:
        type: string # JSON encoded to support passing arrays
        description: A JSON encoded "runs-on" for build worfkflows
        required: true
      compute-build-compat:
        type: string # JSON encoded to support passing arrays
        description: A JSON encoded "runs-on" for build workflows that need older glibc
        required: true
      compute-small:
        type: string # JSON encoded to support passing arrays
        description: A JSON encoded "runs-on" for non-resource-intensive workflows
        required: true
      vault-revision:
        type: string
        required: true
      vault-version:
        type: string
        required: true
      vault-version-package:
        type: string
        required: true
      web-ui-cache-key:
        type: string
        required: true
    outputs:
      testable-containers:
        value: ${{ jobs.docker.outputs.testable-containers }}
      testable-packages:
        value: ${{ jobs.core.outputs.testable-packages }}

jobs:
  # Core are the Linux builds that are officially supported and tested as part of the normal
  # CI/CD pipeline.
  core:
    strategy:
      matrix:
        goos:
          - linux
        goarch:
          - 386
          - amd64
          - arm64
        include:
          - goos: linux
            goarch: arm
            goarm: 6
      fail-fast: true
    runs-on: ${{ fromJSON(inputs.compute-build) }}
    name: (${{ matrix.goos }}, ${{ matrix.goarch }}${{ matrix.goarm && '_' || '' }}${{ matrix.goarm }})
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.checkout-ref }}
      - uses: ./.github/actions/build-vault
        with:
          github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
          create-packages: true
          goarch: ${{ matrix.goarch }}
          goarm: ${{ matrix.goarm }}
          goos: ${{ matrix.goos }}
          go-tags: ui
          vault-binary-name: vault
          vault-edition: ce
          vault-version: ${{ inputs.vault-version }}
          web-ui-cache-key: ${{ inputs.web-ui-cache-key }}
    outputs:
      # Outputs are strings so we need to encode our packages as JSON. Here we output a list of
      # objects where each object refers to an artifact we created and the enos sample name
      # that is compatible for testing it.
      testable-packages: |
        [
          { "sample": "build_ce_linux_amd64_deb",
            "artifact": "vault_${{ inputs.vault-version-package }}-1_amd64.deb",
            "edition": "ce"
          },
          { "sample": "build_ce_linux_arm64_deb",
            "artifact": "vault_${{ inputs.vault-version-package }}-1_arm64.deb",
            "edition": "ce"
          },
          { "sample": "build_ce_linux_amd64_rpm",
            "artifact": "vault-${{ inputs.vault-version-package }}-1.x86_64.rpm",
            "edition": "ce"
          },
          { "sample": "build_ce_linux_arm64_rpm",
            "artifact": "vault-${{ inputs.vault-version-package }}-1.aarch64.rpm",
            "edition": "ce"
          },
          { "sample": "build_ce_linux_amd64_zip",
            "artifact": "vault_${{ inputs.vault-version }}_linux_amd64.zip",
            "edition": "ce"
          },
          { "sample": "build_ce_linux_arm64_zip",
            "artifact": "vault_${{ inputs.vault-version }}_linux_arm64.zip",
            "edition": "ce"
          }
        ]

  # Extended build targets are best-case builds for non-Linux platforms that we create for
  # convenience but are not built or tested as part our normal CI pipeline.
  extended:
    if: inputs.build-all == 'true'
    strategy:
      matrix:
        goos:
          - freebsd
          - netbsd
          - openbsd
          - solaris
          - windows
        goarch:
          - 386
          - amd64
          - arm
        exclude:
          - goos: solaris
            goarch: 386
          - goos: solaris
            goarch: arm
          - goos: windows
            goarch: arm
        include:
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
      fail-fast: true
    name: (${{ matrix.goos }}, ${{ matrix.goarch }})
    runs-on: ${{ fromJSON(inputs.compute-build) }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.checkout-ref }}
      - uses: ./.github/actions/build-vault
        with:
          github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
          create-packages: true
          goarch: ${{ matrix.goarch }}
          goos: ${{ matrix.goos }}
          go-tags: ui
          vault-binary-name: vault
          vault-edition: ce
          vault-version: ${{ inputs.vault-version }}
          web-ui-cache-key: ${{ inputs.web-ui-cache-key }}

  # Package our linux binaries as docker containers
  docker:
    needs: core
    runs-on: ${{ fromJSON(inputs.compute-small) }}
    strategy:
      matrix:
        arch:
          - 386
          - amd64
          - arm
          - arm64
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ inputs.vault-version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.checkout-ref }}
      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{ env.version }}
          target: default
          arch: ${{ matrix.arch }}
          zip_artifact_name: vault_${{ env.version }}_linux_${{ matrix.arch }}.zip
          tags: |
            docker.io/hashicorp/${{ env.repo }}:${{ env.version }}
            public.ecr.aws/hashicorp/${{ env.repo }}:${{ env.version }}
    outputs:
      # Outputs are strings so we need to encode our containers as JSON. Here we output a list of
      # objects where each object refers to a container we created.
      testable-containers: |
        [
          { "artifact": "${{ github.event.repository.name }}_default_linux_amd64_${{ inputs.vault-version }}_${{ inputs.vault-revision }}.docker.tar" }
        ]

  # Package our amd64 binary as a UBI container
  ubi:
    needs: core
    runs-on: ${{ fromJSON(inputs.compute-small) }}
    strategy:
      matrix:
        arch:
          - amd64
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ inputs.vault-version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.checkout-ref }}
      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{ env.version }}
          target: ubi
          arch: ${{ matrix.arch }}
          zip_artifact_name: vault_${{ env.version }}_linux_${{ matrix.arch }}.zip
          # The redhat_tag differs on CE and ENT editions. Be mindful when resolving merge conflicts.
          redhat_tag: quay.io/redhat-isv-containers/5f89bb5e0b94cf64cfeb500a:${{ env.version }}-ubi

  status:
    if: always()
    runs-on: ${{ fromJSON(inputs.compute-small) }}
    permissions:
      id-token: write
      contents: read
    needs:
      - core
      - extended
      - docker
      - ubi
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.checkout-ref }}
      - name: Determine status
        run: |
          results=$(tr -d '\n' <<< '${{ toJSON(needs.*.result) }}')
          if ! grep -q -v -E '(failure|cancelled)' <<< "$results"; then
            echo "One or more required build workflows failed: ${results}"
            exit 1
          fi
          exit 0
