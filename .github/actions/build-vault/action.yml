# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
name: Build Vault
description: Build, package, and upload Vault to Github.

inputs:
  github-token:
    type: string
    description: An elevated Github token to access private Go modules if necessary.
    default: ""
  cgo-enabled:
    type: number
    description: Enable or disable CGO during the build.
    default: 0
  create-packages:
    type: boolean
    description: Package the binaries into deb and rpm formats.
    default: true
  goos:
    type: string
    description: The Go GOOS value environment variable to set during the build.
  goarch:
    type: string
    description: The Go GOARCH value environment variable to set during the build.
  goarm:
    type: string
    description: The Go GOARM value environment variable to set during the build.
    default: ""
  goexperiment:
    type: string
    description: Which Go experiments to enable.
    default: ""
  go-tags:
    type: string
    description: A comma separated list of tags to pass to the Go compiler during build.
    default: ""
  vault-binary-name:
    type: string
    description: The name of the vault binary.
    default: vault
  vault-edition:
    type: string
    description: The edition of vault to build.
  vault-version:
    type: string
    description: The version metadata to inject into the build via the linker.
  web-ui-cache-key:
    type: string
    description: The cache key for restoring the pre-built web UI artifact.

runs:
  using: composite
  steps:
    - name: Ensure zstd is available for actions/cache
      # actions/cache restores based on cache key and "cache version", the former is unique to the
      # build job or web UI, the latter is a hash which is based on the runner OS, the paths being
      # cached, and the program used to compress it. Most of our workflows will use zstd to compress
      # the cached artifact so we have to have it around for our machines to get both a version match
      # and to decompress it. Most runners include zstd by default but there are exception like
      # our Ubuntu 20.04 compatibility runners which do not.
      shell: bash
      run: which zstd || (sudo apt update && sudo apt install -y zstd)
    - uses: ./.github/actions/set-up-go
      with:
        github-token: ${{ inputs.github-token }}
    - if: "! inputs.vault-edition == 'ce'"
      name: Configure Git
      shell: bash
      run: git config --global url."https://${{ inputs.github-token }}:@github.com".insteadOf "https://github.com"
    - name: Restore UI from cache
      uses: actions/cache@e12d46a63a90f2fae62d114769bbf2a179198b5c # v3.3.3
      with:
        # Restore the UI asset from the UI build workflow. Never use a partial restore key.
        enableCrossOsArchive: true
        fail-on-cache-miss: true
        path: http/web_ui
        key: ${{ inputs.web-ui-cache-key }}
    - name: Metadata
      id: metadata
      env:
        GOARCH: ${{ inputs.goarch }}
        GOOS: ${{ inputs.goos }}
        VERSION: ${{ inputs.vault-version }}
      shell: bash
      run: |
        if [ "${{ inputs.vault-edition }}" != "ce" ]; then
            build_step_name='Vault ${{ inputs.goos }} ${{ inputs.goarch }} v${{ inputs.vault-version }}+${{ inputs.vault-edition }}'
            package_version='${{ inputs.vault-version }}+ent' # this should always be +ent here
        else
            build_step_name='Vault ${{ inputs.goos }} ${{ inputs.goarch }} v${{ inputs.vault-version }}'
            package_version='${{ inputs.vault-version }}'
        fi
        {
          echo "artifact-basename=$(make ci-get-artifact-basename)"
          echo "build-step-name=${build_step_name}"
          echo "package-version=${package_version}"
        } | tee -a "$GITHUB_OUTPUT"
    - name: ${{ steps.metadata.outputs.build-step-name }}
      env:
        CGO_ENABLED: ${{ inputs.cgo-enabled }}
        GO_TAGS: ${{ inputs.go-tags }}
        GOARCH: ${{ inputs.goarch }}
        GOARM: ${{ inputs.goarm }}
        GOOS: ${{ inputs.goos }}
        GOEXPERIMENT: ${{ inputs.goexperiment }}
        GOPRIVATE: github.com/hashicorp
        VERSION: ${{ inputs.version }}
        VERSION_METADATA: ${{ inputs.vault-edition != 'ce' && inputs.vault-edition || '' }}
      shell: bash
      run: make ci-build
    - if: inputs.vault-edition != 'ce'
      shell: bash
      run: make ci-prepare-legal
    - name: Bundle Vault
      env:
        BUNDLE_PATH: out/${{ steps.metadata.outputs.artifact-basename }}.zip
      shell: bash
      run: make ci-bundle
    - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      # pin to v3.x until HREL-99 is resolved.
      with:
        name: ${{ steps.metadata.outputs.artifact-basename }}.zip
        path: out/${{ steps.metadata.outputs.artifact-basename }}.zip
        if-no-files-found: error
    - if: ${{ inputs.create-packages }}
      uses: hashicorp/actions-packaging-linux@v1
      with:
        name: ${{ github.event.repository.name }}
        description: Vault is a tool for secrets management, encryption as a service, and privileged access management.
        arch: ${{ inputs.goarch }}
        version: ${{ steps.metadata.outputs.package-version }}
        maintainer: HashiCorp
        homepage: https://github.com/hashicorp/vault
        license: BUSL-1.1
        binary: dist/${{ inputs.vault-binary-name }}
        deb_depends: openssl
        rpm_depends: openssl
        config_dir: .release/linux/package/
        preinstall: .release/linux/preinst
        postinstall: .release/linux/postinst
        postremove: .release/linux/postrm
    - if: ${{ inputs.create-packages }}
      id: package-files
      name: Determine package file names
      shell: bash
      run: |
        {
          echo "rpm-files=$(basename out/*.rpm)"
          echo "deb-files=$(basename out/*.deb)"
        } | tee -a "$GITHUB_OUTPUT"
    - if: ${{ inputs.create-packages }}
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      # pin to v3.x until HREL-99 is resolved.
      with:
        name: ${{ steps.package-files.outputs.rpm-files }}
        path: out/${{ steps.package-files.outputs.rpm-files }}
        if-no-files-found: error
    - if: ${{ inputs.create-packages }}
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      # pin to v3.x until HREL-99 is resolved.
      with:
        name: ${{ steps.package-files.outputs.deb-files }}
        path: out/${{ steps.package-files.outputs.deb-files }}
        if-no-files-found: error
