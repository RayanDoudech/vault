# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

---
name: Determine what files changed between two git referecnes.
description: |
  Determine what files have changed between two git references. If the github.event_type is
  pull_request we'll compare the github.base_ref (merge target) and pull request head SHA.
  For other event types we'll gather the changed files from the most recent commit. This allows
  us to support PR and merge workflows.

outputs:
  app-changed:
    description: Whether or not the vault Go app was modified.
    value: ${{ steps.changed-files.outputs.app-changed }}
  docs-changed:
    description: Whether or not the documentation was modified.
    value: ${{ steps.changed-files.outputs.docs-changed }}
  ui-changed:
    description: Whether or not the web UI was modified.
    value: ${{ steps.changed-files.outputs.ui-changed }}
  files:
    description: All of the file names that changed.
    value: ${{ steps.changed-files.outputs.files }}

runs:
  using: composite
  steps:
    - id: ref
      shell: bash
      run: |
        # Determine our desired checkout ref and fetch depth. Depending our our workflow event
        # trigger, inputs, and tags, we'll check out different references at different depths.
        #
        # * If the trigger event is a pull request we will default to a magical merge SHA that Github
        #   creates. Essentially, this SHA is the product of merging our PR into the merge target
        #   branch at some point in time. When you push a change to a PR branch Github updates this
        #   branch if it can.
        # * If the trigger event is a pull request and a `checkout-head` tag is present or the
        #   checkout-head input is set, we'll use HEAD of the PR branch instead of the magical
        #   merge SHA.
        # * If the trigger event is a push (merge) then we'll get the latest commit that was pushed.
        # * For anything any other event type we'll default to whatever is default in Github.
        #
        # Our fetch depth will varies depending on what our chosen SHA is. We normally want to do
        # the most shallow clone possible for speed, but we also need to support getting history
        # for determining what files have changed, etc. We'll always check out one level deep for
        # merges or standard pull requests. If checking out HEAD is requested we'll fetch a deeper
        # history because we need all commits on the branch.
        #
        if [ '${{ github.event_name }}' = 'pull_request' ]; then
            checkout_ref='${{ github.event.pull_request.head.sha }}'
            fetch_depth=0
        elif [ '${{ github.event_name }}' = 'push' ]; then
          # Our checkout ref for any other event type should default to the github ref.
          checkout_ref='${{ github.event.push.after }}'
          fetch_depth=1
        else
          checkout_ref='${{ github.ref }}'
          fetch_depth=0
        fi
        {
          echo "ref=${checkout_ref}"
          echo "depth=${fetch_depth}"
        } | tee -a "$GITHUB_OUTPUT"
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        repository: ${{ github.repository }}
        path: "changed-files"
        fetch-depth: ${{ steps.ref.outputs.depth }}
        ref: ${{ steps.ref.outputs.ref }}
    - id: changed-files
      # This script writes output values to $GITHUB_OUTPUT and STDOUT
      shell: bash
      run: ./.github/scripts/changed-files.sh ${{ github.event_name }} ${{ github.ref_name }} ${{ github.base_ref }}
      working-directory: changed-files
